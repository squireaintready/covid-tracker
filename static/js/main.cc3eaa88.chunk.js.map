{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","isRed","cases","total","active","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","multiplier","recovered","deaths","sortData","data","sort","a","b","prettyPrintState","stat","numeral","format","Map","countries","casesType","center","zoom","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","parser","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","LineGraph","useState","setData","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","useEffect","fetch","then","res","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","response","name","iso2","sortedData","getCountriesData","onCountryChange","event","countryCode","target","console","log","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"kXAoBeA,MAhBf,YAAkE,IAAhDC,EAA+C,EAA/CA,MAAOC,EAAwC,EAAxCA,MAAOC,EAAiC,EAAjCA,MAAOC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,OAAWC,EAAQ,0DAC7D,OACI,kBAACC,EAAA,EAAD,CAAMC,QAASF,EAAME,QAASC,UAAS,kBAAaJ,GAAU,oBAAvB,YAA8CH,GAAS,iBAC1F,kBAACQ,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYF,UAAU,iBAAgBG,MAAM,iBACvCX,GAEL,wBAAIQ,UAAS,0BAAqBP,GAAS,0BAA4BC,GACvE,kBAACQ,EAAA,EAAD,CAAYF,UAAU,kBACjBL,EADL,a,sECRVS,EAAkB,CACpBV,MAAM,CACFW,IAAI,UACJC,WAAY,KAEhBC,UAAU,CACNF,IAAI,UACJC,WAAY,MAEhBE,OAAO,CACHH,IAAI,SACJC,WAAY,MAIPG,EAAW,SAACC,GAErB,OADgB,YAAOA,GACLC,MAAK,SAACC,EAAEC,GAAH,OAASD,EAAElB,MAAQmB,EAAEnB,OAAS,EAAI,MAGhDoB,EAAmB,SAACC,GAAD,OAC5BA,EAAI,WAAOC,IAAQD,GAAME,OAAO,SAAY,GCLjCC,MAff,YAAoD,IAAtCC,EAAqC,EAArCA,UAAWC,EAA0B,EAA1BA,UAAWC,EAAe,EAAfA,OAAQC,EAAO,EAAPA,KACxC,OACI,yBAAKtB,UAAU,OACX,kBAAC,IAAD,CAAYqB,OAAQA,EAAQC,KAAMA,GAC9B,kBAACC,EAAA,EAAD,CACIC,IAAI,qDACJC,YAAY,0EDkBH,SAACf,GAAD,IAAOU,EAAP,uDAAiB,QAAjB,OACzBV,EAAKgB,KAAI,SAAAC,GAAO,OACZ,kBAACC,EAAA,EAAD,CACIP,OAAU,CAACM,EAAQE,YAAYC,IAAKH,EAAQE,YAAYE,MACxDC,YAAa,GACb7B,MAAOC,EAAgBgB,GAAWf,IAClC4B,UAAW7B,EAAgBgB,GAAWf,IACtC6B,OACIC,KAAKC,KAAKT,EAAQP,IAAchB,EAAgBgB,GAAWd,YAGnE,kBAAC+B,EAAA,EAAD,KACI,yBAAKrC,UAAU,kBACX,yBAAKA,UAAU,YAAWsC,MAAO,CAACC,gBAAgB,OAAD,OAAQZ,EAAQE,YAAYW,KAA5B,QACjD,yBAAKxC,UAAU,aAAa2B,EAAQA,SACpC,yBAAK3B,UAAU,kBAAf,UAAwCgB,IAAQW,EAAQjC,OAAOuB,OAAO,QACtE,yBAAKjB,UAAU,kBAAf,cAA4CgB,IAAQW,EAAQpB,WAAWU,OAAO,QAC9E,yBAAKjB,UAAU,eAAf,WAAsCgB,IAAQW,EAAQnB,QAAQS,OAAO,cChCpEwB,CAActB,EAAWC,M,OCI1BsB,MAdhB,YAA6B,IAAbvB,EAAY,EAAZA,UACZ,OACI,yBAAKnB,UAAU,SACVmB,EAAUO,KAAI,gBAAEC,EAAF,EAAEA,QAAQjC,EAAV,EAAUA,MAAV,OACX,4BACI,4BAAKiC,GACL,4BACI,gCAASX,IAAQtB,GAAOuB,OAAO,e,QCPjD0B,EAAU,CACZC,OAAQ,CACJC,SAAS,GAEbC,SAAU,CACNC,MAAO,CACHb,OAAQ,IAGhBc,qBAAqB,EACrBC,SAAU,CACNC,KAAM,QACNC,WAAW,EACXC,UAAW,CACPC,MAAO,SAAUC,EAAa5C,GAC1B,OAAOM,IAAQsC,EAAYC,OAAOtC,OAAO,WAIrDuC,OAAQ,CACJC,MAAO,CACH,CACIC,KAAM,OACNC,KAAM,CACFC,OAAQ,WACRC,cAAe,QAI3BC,MAAO,CACH,CACIC,UAAW,CACPlB,SAAS,GAEbmB,MAAO,CAEHC,SAAU,SAAUV,EAAOW,EAAOC,GAC9B,OAAOnD,IAAQuC,GAAOtC,OAAO,YAiEtCmD,MAzDf,YAAmD,IAAD,IAA9BhD,iBAA8B,MAApB,QAAoB,EAARvB,EAAQ,+BACtBwE,mBAAS,IADa,mBACvC3D,EADuC,KACjC4D,EADiC,KAExCC,EAAiB,SAAC7D,EAAMU,GAC1B,IACIoD,EADEC,EAAY,GAElB,IAAK,IAAIC,KAAQhE,EAAKhB,MAAO,CACzB,GAAI8E,EAAe,CACf,IAAMG,EAAe,CACjBC,EAAGF,EACHG,EAAGnE,EAAKU,GAAWsD,GAAQF,GAE/BC,EAAUK,KAAKH,GAEnBH,EAAgB9D,EAAKU,GAAWsD,GAEpC,OAAOD,GAgBX,OAbAM,qBAAU,YACS,uCAAG,sBAAAnE,EAAA,sEACRoE,MAAM,8DACPC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAvE,GAEF,IAAM+D,EAAYF,EAAe7D,EAAMU,GACvCkD,EAAQG,MANF,2CAAH,qDASfW,KACD,CAAChE,IAGA,yBAAKpB,UAAWH,EAAMG,YACb,OAAJU,QAAI,IAAJA,OAAA,EAAAA,EAAM2E,QAAS,GACZ,kBAAC,OAAD,CACI1C,QAASA,EACTjC,KAAM,CACF4E,SAAU,CACQ,cAAdlE,EAA0B,CACtBmE,gBAAiB,oBACjBC,YAAa,QACb9E,KAAMA,GAET,CACG6E,gBAAiB,sBACjBC,YAAa,UACb9E,KAAMA,S,OCYvB+E,MAjGf,WAAgB,IAAD,EACqBpB,mBAAS,IAD9B,mBACNlD,EADM,KACKuE,EADL,OAEiBrB,mBAAS,aAF1B,mBAEN1C,EAFM,KAEGgE,EAFH,OAGyBtB,mBAAS,IAHlC,mBAGNxC,EAHM,KAGO+D,EAHP,OAIqBvB,mBAAS,IAJ9B,mBAINwB,EAJM,KAIKC,EAJL,OAKqBzB,mBAAS,CAACvC,IAAK,SAAUiE,KAAK,UALnD,mBAKNC,EALM,KAKKC,EALL,OAMiB5B,mBAAS,GAN1B,mBAMN6B,EANM,KAMGC,EANH,OAO2B9B,mBAAS,IAPpC,mBAON+B,EAPM,KAOQC,EAPR,OAQqBhC,mBAAS,SAR9B,mBAQNjD,EARM,KAQKkF,EARL,KAWbvB,qBAAU,WACRC,MAAM,sCACLC,MAAK,SAAAsB,GAAQ,OAAIA,EAASpB,UAC1BF,MAAK,SAAAvE,GACJkF,EAAelF,QAEhB,IAEHqE,qBAAU,YACc,uCAAG,sBAAAnE,EAAA,sEACjBoE,MAAM,4CACTC,MAAK,SAACsB,GAAD,OAAcA,EAASpB,UAC5BF,MAAK,SAACvE,GACL,IAAMS,EAAYT,EAAKgB,KAAI,SAAAC,GAAO,MAChC,CACE6E,KAAM7E,EAAQA,QACd4B,MAAO5B,EAAQE,YAAY4E,SAGzBC,EAAajG,EAASC,GAC5BoF,EAAaY,GACbL,EAAgB3F,GAChBgF,EAAavE,MAbM,2CAAH,qDAiBtBwF,KACC,IAEH,IAAMC,EAAe,uCAAG,WAAOC,GAAP,iBAAAjG,EAAA,6DAChBkG,EAAcD,EAAME,OAAOxD,MACjCoC,EAAWmB,GACLtF,EAAsB,cAAhBsF,EAA8B,qCAA9B,mDACkCA,GAJxB,SAMhB9B,MAAMxD,GACXyD,MAAK,SAAAsB,GAAQ,OAAIA,EAASpB,UAC1BF,MAAK,SAAAvE,GACJiF,EAAWmB,GACXlB,EAAelF,GAEfsG,QAAQC,IAAI,aAAcvG,EAAKmB,aAC/BoE,EAAa,CAACvF,EAAKmB,YAAYC,IAAKpB,EAAKmB,YAAYE,OACrDoE,EAAW,MAdS,2CAAH,sDAmBrB,OACE,yBAAKnG,UAAU,OACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,eACb,gDACA,kBAACkH,EAAA,EAAD,CAAalH,UAAU,iBACrB,kBAACmH,EAAA,EAAD,CACEC,QAAQ,WACR7D,MAAO5B,EACP0F,SAAUT,GAEV,kBAACU,EAAA,EAAD,CAAU/D,MAAM,aAAhB,aACCpC,EAAUO,KAAI,SAAAC,GAAO,OACpB,kBAAC2F,EAAA,EAAD,CAAU/D,MAAO5B,EAAQ4B,OAAQ5B,EAAQ6E,YAMjD,yBAAKxG,UAAU,cACb,kBAAC,EAAD,CAASP,OAAK,EAACG,OAAoB,UAAZwB,EAAqBrB,QAAS,SAAAwH,GAAC,OAAIjB,EAAa,UAAU9G,MAAM,oBAAoBG,MAAOmB,EAAiBe,EAAYnC,OAAQA,MAAOoB,EAAiBe,EAAY2F,cAC3L,kBAAC,EAAD,CAAS5H,OAAoB,cAAZwB,EAAyBrB,QAAS,SAAAwH,GAAC,OAAIjB,EAAa,cAAc9G,MAAM,YAAYG,MAAOmB,EAAiBe,EAAYtB,WAAYb,MAAOoB,EAAiBe,EAAY4F,kBACzL,kBAAC,EAAD,CAAShI,OAAK,EAACG,OAAoB,WAAZwB,EAAsBrB,QAAS,SAAAwH,GAAC,OAAIjB,EAAa,WAAW9G,MAAM,SAASG,MAAOmB,EAAiBe,EAAYrB,QAASd,MAAOoB,EAAiBe,EAAY6F,gBAErL,kBAAC,EAAD,CAAKtG,UAAWA,EAAWD,UAAaiF,EAAc/E,OAAQ2E,EAAW1E,KAAM4E,KAEjF,kBAACpG,EAAA,EAAD,CAAME,UAAU,cACd,kBAACC,EAAA,EAAD,KACE,qDACA,kBAAC,EAAD,CAAOkB,UAAa0E,IACpB,wBAAI7F,UAAU,mBAAd,iBAA+CoB,GAC/C,kBAAC,EAAD,CAAWpB,UAAU,aAAaoB,UAAWA,QCxFnCuG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtD,MAAK,SAAAuD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,a","file":"static/js/main.cc3eaa88.chunk.js","sourcesContent":["import React from 'react'\r\nimport './InfoBox.css'\r\nimport {Card, CardContent, Typography} from '@material-ui/core'\r\n\r\nfunction InfoBox({title, isRed, cases, total, active, ...props}) {\r\n    return (\r\n        <Card onClick={props.onClick} className={`infoBox ${active && 'infoBox--selected'} ${isRed && 'infoBox--red'}`}>\r\n            <CardContent> \r\n                <Typography className='infoBox__title'color='textSecondary'>\r\n                    {title}\r\n                </Typography>\r\n                <h2 className={`infoBox__cases ${!isRed && 'infoBox__cases--green'}`}>{cases}</h2>\r\n                <Typography className='infoBox__total'>\r\n                    {total} Total\r\n                </Typography>\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default InfoBox\r\n","import React from 'react'\r\nimport numeral from 'numeral'\r\nimport {Circle, Popup} from 'react-leaflet'\r\n\r\nconst casesTypeColors = {\r\n    cases:{\r\n        hex:'#CC1034',\r\n        multiplier: 800,\r\n    },\r\n    recovered:{\r\n        hex:'#7dd71d',\r\n        multiplier: 1200,\r\n    },\r\n    deaths:{\r\n        hex:'#fb443',\r\n        multiplier: 2000,\r\n    },\r\n};\r\n\r\nexport const sortData = (data) =>{\r\n    const sortedData = [...data];\r\n    return sortedData.sort((a,b) => a.cases > b.cases ? -1 : 1)\r\n}\r\n\r\nexport const prettyPrintState = (stat) =>(\r\n    stat ? `+${numeral(stat).format('0.0a')}` : 0\r\n)\r\n\r\n//Draws circles on map with interative tooltips\r\nexport const showDataOnMap = (data, casesType='cases') =>(\r\n    data.map(country =>(\r\n        <Circle\r\n            center = {[country.countryInfo.lat, country.countryInfo.long]}\r\n            fillOpacity={0.4}\r\n            color={casesTypeColors[casesType].hex}\r\n            fillColor={casesTypeColors[casesType].hex}\r\n            radius={\r\n                Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n            }\r\n        >\r\n        <Popup>\r\n            <div className='info-container'>\r\n                <div className='info-flag'style={{backgroundImage:`url(${country.countryInfo.flag})`}}/>\r\n                <div className='info-name'>{country.country}</div>\r\n                <div className='info-confirmed'>Cases: {numeral(country.cases).format('0,0')}</div>\r\n                <div className='info-recovered'>Recovered: {numeral(country.recovered).format('0,0')}</div>\r\n                <div className='info-deaths'>Deaths: {numeral(country.deaths).format('0,0')}</div>\r\n            </div>\r\n        </Popup>\r\n        </Circle>\r\n    ))\r\n)\r\n","import React from 'react'\r\nimport './Map.css'\r\nimport {Map as LeafletMap, TileLayer} from 'react-leaflet'\r\nimport { showDataOnMap } from './util'\r\n\r\nfunction Map({countries, casesType, center, zoom}) {\r\n    return (\r\n        <div className='map'>\r\n            <LeafletMap center={center} zoom={zoom}>\r\n                <TileLayer\r\n                    url='https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'\r\n                    attribution='&copy; \r\n                    <a href=\"http://osm.org/copyright\">OpenStreet</a>contributors'\r\n                />\r\n                {showDataOnMap(countries, casesType)}\r\n            </LeafletMap>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Map\r\n","import React from 'react'\r\nimport './Table.css'\r\nimport numeral from 'numeral'\r\n\r\nfunction Table({countries}) {\r\n    return (\r\n        <div className='table'> \r\n            {countries.map(({country,cases}) => (\r\n                <tr>\r\n                    <td>{country}</td>\r\n                    <td>\r\n                        <strong>{numeral(cases).format('0,0')}</strong>\r\n                    </td>\r\n                </tr>\r\n            ))}      \r\n        </div>\r\n    )\r\n}\r\n export default Table\r\n","import React, { useState, useEffect } from 'react'\r\nimport { Line } from 'react-chartjs-2'\r\nimport numeral from 'numeral'\r\n\r\nconst options = {\r\n    legend: {\r\n        display: false,\r\n    },\r\n    elements: {\r\n        point: {\r\n            radius: 0,\r\n        },\r\n    },\r\n    maintainAspectRatio: false,\r\n    tooltips: {\r\n        mode: 'index',\r\n        intersect: false,\r\n        callbacks: {\r\n            label: function (tooltipItem, data) {\r\n                return numeral(tooltipItem.value).format('+0,0');\r\n            },\r\n        },\r\n    },\r\n    scales: {\r\n        xAxes: [\r\n            {\r\n                type: 'time',\r\n                time: {\r\n                    parser: 'MM/DD/YY',\r\n                    tooltipFormat: 'll',\r\n                },\r\n            },\r\n        ],\r\n        yAxes: [\r\n            {\r\n                gridLines: {\r\n                    display: false\r\n                },\r\n                ticks: {\r\n                    //Includes a dollar $ in the ticks\r\n                    callback: function (value, index, values) {\r\n                        return numeral(value).format('0a');\r\n                    }\r\n                }\r\n            },\r\n        ],\r\n    }\r\n}\r\n\r\nfunction LineGraph({casesType='cases', ...props}) {\r\n    const [data, setData] = useState({})\r\n    const buildChartData = (data, casesType) => {\r\n        const chartData = [];\r\n        let lastDataPoint;\r\n        for (let date in data.cases) {\r\n            if (lastDataPoint) {\r\n                const newDataPoint = {\r\n                    x: date,\r\n                    y: data[casesType][date] - lastDataPoint\r\n                }\r\n                chartData.push(newDataPoint)\r\n            }\r\n            lastDataPoint = data[casesType][date];\r\n        }\r\n        return chartData\r\n    }\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            await fetch('https://disease.sh/v3/covid-19/Historical/all?lastdays=120')\r\n                .then(res => res.json())\r\n                .then(data => {\r\n                    //some clever stuff to manipulate the data\r\n                    const chartData = buildChartData(data, casesType);\r\n                    setData(chartData);\r\n                })\r\n        }\r\n        fetchData();\r\n    }, [casesType])\r\n\r\n    return (\r\n        <div className={props.className}>\r\n            {data?.length > 0 && (\r\n                <Line\r\n                    options={options}\r\n                    data={{\r\n                        datasets: [\r\n                            casesType === 'recovered'?{\r\n                                backgroundColor: 'rgb(173, 255, 47)',\r\n                                borderColor: 'green',\r\n                                data: data,\r\n                            }\r\n                            :{\r\n                                backgroundColor: 'rgba(204,16,52,0.5)',\r\n                                borderColor: '#CC1034',\r\n                                data: data,\r\n                            }\r\n                        ]\r\n                    }}\r\n                />\r\n            )}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LineGraph\r\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { MenuItem, FormControl, Select, Card, CardContent } from '@material-ui/core'\nimport InfoBox from './InfoBox';\nimport Map from './Map'\nimport Table from './Table'\nimport { sortData, prettyPrintState } from './util';\nimport LineGraph from './LineGraph';\nimport 'leaflet/dist/leaflet.css';\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState('worldwide')\n  const [countryInfo, setCountryInfo] = useState({})\n  const [tableData, setTableData] = useState([])\n  const [mapCenter, setMapCenter] = useState({lat: 34.80746, lng:-40.4796})\n  const [mapZoom, setMapZoom] = useState(3)\n  const [mapCountries, setMapCountries] = useState([])\n  const [casesType, setCasesType] = useState('cases')\n  \n\n  useEffect(() =>{\n    fetch('https://disease.sh/v3/covid-19/all')\n    .then(response => response.json())\n    .then(data =>{\n      setCountryInfo(data)\n    })\n  }, [])\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch('https://disease.sh/v3/covid-19/countries')\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map(country => (\n            {\n              name: country.country,\n              value: country.countryInfo.iso2,\n            }\n          ));\n          const sortedData = sortData(data);\n          setTableData(sortedData);\n          setMapCountries(data);\n          setCountries(countries);\n          \n        })\n    }\n    getCountriesData()\n  }, [])\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;\n    setCountry(countryCode)\n    const url = countryCode === 'worldwide' ? 'https://disease.sh/v3/covid-19/all' \n    : `https://disease.sh/v3/covid-19/countries/${countryCode}`\n\n    await fetch(url)\n    .then(response => response.json())\n    .then(data => {\n      setCountry(countryCode)\n      setCountryInfo(data)\n\n      console.log('info >>>> ', data.countryInfo)\n      setMapCenter([data.countryInfo.lat, data.countryInfo.long])\n      setMapZoom(4)\n    })\n    // https://disease.sh/v3/covid-19/all\n    // https://disease.sh/v3/covid-19/countries/[COUNTRY_CODE]\n  }\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>COVID-19 TRACKER</h1>\n          <FormControl className='app__dropdown'>\n            <Select\n              variant='outlined'\n              value={country}\n              onChange={onCountryChange}\n            >\n              <MenuItem value='worldwide'>Worldwide</MenuItem>\n              {countries.map(country => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n\n        <div className=\"app__stats\">\n          <InfoBox isRed active={casesType==='cases'} onClick={e => setCasesType('cases')} title='Coronavirus cases' total={prettyPrintState(countryInfo.cases)} cases={prettyPrintState(countryInfo.todayCases)} />\n          <InfoBox active={casesType==='recovered'} onClick={e => setCasesType('recovered')} title='Recovered' total={prettyPrintState(countryInfo.recovered)} cases={prettyPrintState(countryInfo.todayRecovered)} />\n          <InfoBox isRed active={casesType==='deaths'} onClick={e => setCasesType('deaths')} title='Deaths' total={prettyPrintState(countryInfo.deaths)} cases={prettyPrintState(countryInfo.todayDeaths)} />\n        </div>\n        <Map casesType={casesType} countries = {mapCountries} center={mapCenter} zoom={mapZoom}/>\n      </div>\n      <Card className=\"app__right\">\n        <CardContent>\n          <h3>Life Cases by Country</h3>\n          <Table countries = {tableData}/>\n          <h3 className='app__graphTitle'>Worldwide new {casesType}</h3>\n          <LineGraph className='app__graph' casesType={casesType}/>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}